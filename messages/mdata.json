{
  "general": {
    "flags": {
      "loglevel": "logging level for this command invocation"
    },
    "errors": {
      "noOrgFound": "No org configuration found for name %s"
    },
    "infos": {
      "usingUsername": "Using org with username: %s",
      "done": "done"
    }
  },
  "communities": {
    "publish": {
      "description": "publishes one or more Experience Cloud communities",
      "flags": {
        "name": "comma-separated list of community names"
      },
      "infos": {
        "progressBarFormat": "Publishing [{bar}] {percentage}% | {value}/{total} | Community: {communityName}"
      },
      "errors": {
        "noCommunitiesFound": "No communities found"
      }
    }
  },
  "translations": {
    "convert": {
      "description": "converts a translation file from one format to another (e.g. from Salesforce Translation Format (STF) to Excel or viceversa)",
      "flags": {
        "from": "Format of the source file",
        "to": "Format of the destination file",
        "infile": "Path of the input file",
        "outfile": "Path of the output file",
        "metadata": "Comma-separated list of metadata component names",
        "sheets": "Comma-separated list of XLSX sheet names",
        "rowheadernum": "Index (starts from 1) of the row that contains the header"
      },
      "errors": {
        "noInputFileFound": "Input file not found or you don't have read access to it",
        "outputFileError": "Error writing to output file. Make sure you have proper access to it",
        "invalidFromToCombo": "Invalid combination of \"from\" and \"to\" formats",
        "invalidFileName": "Invalid file name",
        "invalidSaveFilePath": "Invalid save file path",
        "invalidStfNoHeader": "Invalid stf file, no translation information defined",
        "invalidStfType": "Invalid stf file, stf file type is invalid",
        "invalidStfFormat": "Invalid stf file, stf file format is invalid",
        "invalidStfKeyNotFound": "Invalid stf file, %s not found",
        "oneOrMoreSheetsNotFound": "One or more Excel Sheet do not exist"
      }
    }
  },
  "metadata": {
    "patch": {
      "description": "patches source metadata files in order to solve common Salesforce deployment bugs or to modifly on the fly API endpoints",
      "flags": {
        "env": "Environment name used to select the correct patch set from sfdx-project.json",
        "outsourcedir": "the output directory to store the patched source files",
        "outmanifestdir": "the output directory to store the patched manifest file (package.xml)",
        "rootdir": "the input directory that contains the source files to be patched",
        "inmanifestdir": "the input manifest (package.xml) file describing the contents of the source files",
        "fixes": "file path of a JSON that describes the set of fixes and/or patches  to be made",
        "mdapimapfile": "file with JSON that maps workspaces files (using source structure) to mdapi files. Not intended to be used when invoked directly, but when invoked by CLI Pre Deploy Hook.",
        "propfile": "file path o a key-value declaration to be loaded as part of the environment variables to be seen by the command",
        "subpath": "Optional subpath(s) between the root dir and the actual sources dir (where the profiles/, classes/, etc. are stored)"
      },
      "infos": {
        "executingDelLwc": "Executing task delLwc...",
        "executingPreDeployFixes": "Executing task preDeployFixes...",
        "executingPreDeployFixesHook": "Executing hooked task preDeployFixes...",
        "executingFixUnfiledPublic": "Executing task fixEmailUnfiledPublicFolder...",
        "copyingToFolder": "Copying to %s",
        "inPlacePatch": "Patching in place"
      },
      "warns": {
        "missingFile": "Missing file %s",
        "missingConfiguration": "Missing configuration in sfdx-project.json"
      }
    }
  },
  "apex": {
    "testdependencies": {
      "description": "computes the list of (statically) dependant Apex Test Classes to a list of Apex Classes supplied in input up to a certain depth",
      "flags": {
        "config": "show interactive prompt to configure the plugin (writes result on sfdx-project.json",
        "metadata": "comma-separated list of Apex Class names",
        "nameconv": "naming convention to apply to generate Apex Class Test names",
        "depth": "how many iterations to perform while navigating the tree of dependencies",
        "from": "commit sha from where the diff is done [git rev-list --max-parents=0 HEAD]",
        "to": "[default: HEAD] commit sha to where the diff is done",
        "manifest": "file path for manifest (package.xml) of components to deploy in delta",
        "destructivemanifest": "file path for destructive manifest (package.xml) of components to delete in delta",
        "usecodecoverage": "include target org existing code coverage tables to extract dependencies",
        "usedependencyapi": "use target org Dependency API (Beta) to extract dependencies",
        "fuzzythreshold": "the minimum score that can be returned in the fuzzy match",
        "prod": "pass this flag if the command is running while validating / deploying to production"
      }
    }
  },
  "manifest": {
    "align": {
      "description": "align manifest (package.xml) in a project using the source format according to the components present in the project itself",
      "flags": {
        "rootdir": "a source directory from which the manifest (package.xml) is generated",
        "sourcepath": "comma-separated list of paths to the local source files from which the manifest (package.xml) is generated",
        "manifest": "output filepath to which the manifest (package.xml) is written",
        "metadata": "comma-separated list of metadata component names to include in the manifest"
      }
    },
    "sort": {
      "description": "sort alphabetically the components in a manifest (package.xml) file",
      "flags": {
        "manifest": "file path for manifest (package.xml) of components to sort"
      },
      "errors": {
        "noInputFileFound": "Input file not found or you don't have read access to it",
        "badXml": "manifest XML is malformed: %s",
        "writeXml": "error while trying to write resulting manifest: %s"
      }
    }
  },
  "profile": {
    "retrieve": {
      "description": "retrieve one or more profiles in a project considering all the rest of sources",
      "flags": {
        "rootdir": "a source directory from which the components together with profiles are retrieved",
        "sourcepath": "comma-separated list of paths to the local source files from to retrieve together with profiles",
        "manifest": "manifest (package.xml) to retrieve",
        "profiles": "comma-separated list of profile names to retrieve (by default they are all retrieved according to what is found in sources/root dir/manifest)",
        "outdir": "output directory to store the retrieved profiles"
      }
    }
  },
  "permset": {
    "retrieve": {
      "description": "retrieve one or more permission sets in a project considering all the rest of sources",
      "flags": {
        "rootdir": "a source directory from which the components together with permission sets are retrieved",
        "sourcepath": "comma-separated list of paths to the local source files from to retrieve together with permission sets",
        "manifest": "manifest (package.xml) to retrieve",
        "profiles": "comma-separated list of permission sets names to retrieve (by default they are all retrieved according to what is found in sources/root dir/manifest)",
        "outdir": "output directory to store the retrieved permission sets"
      }
    }
  },
  "utility": {
    "retrieve": {
      "info": {
        "retrieveJobId": "Retrieve Job ID: %s",
        "retrieveStatus": "Retrieve Status: %s",
        "writingFile": "Writing file %s..."
      }
    }
  }
}
